import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import sqlite3
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ApplicationStates(StatesGroup):
    minecraft_name = State()
    interesting_info = State()

class RecruiterStates(StatesGroup):
    waiting_for_reply = State()

# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
CREATOR_ID = 6471613931

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
def init_db():
    conn = sqlite3.connect('applications.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            minecraft_name TEXT NOT NULL,
            interesting_info TEXT NOT NULL,
            status TEXT DEFAULT 'pending',
            response TEXT,
            responded_by INTEGER,
            response_date TIMESTAMP,
            application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id INTEGER PRIMARY KEY,
            application_count INTEGER DEFAULT 0,
            last_application_date TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –Ω–∞–±–æ—Ä
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS recruiters (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            added_by INTEGER,
            added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–∞–Ω–æ–≤ (–æ—Ç–∫–∞–∑–æ–≤)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            banned_by INTEGER NOT NULL,
            reason TEXT,
            ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ban_until TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def execute_db_query(query, params=(), fetch=False):
    conn = sqlite3.connect('applications.db', check_same_thread=False, timeout=30)
    conn.execute("PRAGMA busy_timeout = 30000")  # 30 —Å–µ–∫—É–Ω–¥ timeout
    cursor = conn.cursor()
    try:
        cursor.execute(query, params)
        if fetch:
            result = cursor.fetchall()
        else:
            result = cursor.lastrowid
        conn.commit()
        return result
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
def is_creator(user_id):
    return user_id == CREATOR_ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –Ω–∞–±–æ—Ä
def is_recruiter(user_id):
    try:
        result = execute_db_query('SELECT 1 FROM recruiters WHERE user_id = ?', (user_id,), fetch=True)
        return len(result) > 0 or is_creator(user_id)
    except Exception as e:
        logger.error(f"Error checking recruiter status: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
def add_user_as_recruiter(user_id, username, first_name, last_name, added_by):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
        existing = execute_db_query('SELECT 1 FROM recruiters WHERE user_id = ?', (user_id,), fetch=True)
        if existing:
            return False, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        execute_db_query('''
            INSERT INTO recruiters (user_id, username, first_name, last_name, added_by)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, added_by))
        
        return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ"
    except Exception as e:
        logger.error(f"Error adding recruiter: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_banned(user_id):
    try:
        result = execute_db_query(
            'SELECT ban_until FROM bans WHERE user_id = ? AND is_active = TRUE AND ban_until > ?', 
            (user_id, datetime.now()), 
            fetch=True
        )
        if result:
            ban_until = datetime.fromisoformat(result[0][0])
            return True, ban_until
        return False, None
    except Exception as e:
        logger.error(f"Error checking user ban: {e}")
        return False, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
def check_application_limit(user_id):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        banned, ban_until = is_user_banned(user_id)
        if banned:
            return False, f"‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}"
        
        result = execute_db_query('SELECT application_count FROM user_stats WHERE user_id = ?', (user_id,), fetch=True)
        if result and result[0][0] >= 3:
            return False, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏."
        return True, ""
    except Exception as e:
        logger.error(f"Error checking application limit: {e}")
        return True, ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existing = execute_db_query('SELECT application_count FROM user_stats WHERE user_id = ?', (user_id,), fetch=True)
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            execute_db_query(
                'UPDATE user_stats SET application_count = application_count + 1, last_application_date = ? WHERE user_id = ?',
                (datetime.now(), user_id)
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            execute_db_query(
                'INSERT INTO user_stats (user_id, application_count, last_application_date) VALUES (?, 1, ?)',
                (user_id, datetime.now())
            )
    except Exception as e:
        logger.error(f"Error updating user stats: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ban_user(user_id, banned_by, reason="–û—Ç–∫–∞–∑ –≤ –∑–∞—è–≤–∫–µ"):
    try:
        ban_until = datetime.now() + timedelta(days=14)  # –ë–∞–Ω –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
        execute_db_query('''
            INSERT INTO bans (user_id, banned_by, reason, ban_until) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, banned_by, reason, ban_until))
        return True
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu(user_id):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
    builder.add(KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    
    if is_creator(user_id) or is_recruiter(user_id):
        builder.add(KeyboardButton(text="üë®‚Äçüíº –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"))
    
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
def get_admin_panel(user_id):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"))
    builder.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    
    if is_creator(user_id):
        builder.add(KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö"))
    
    builder.add(KeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
def get_application_control_keyboard_creator(application_id, user_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{application_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{application_id}"))
    builder.add(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{application_id}"))
    builder.add(InlineKeyboardButton(text="üë• –°–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º", callback_data=f"make_recruiter_{application_id}"))
    builder.add(InlineKeyboardButton(text="üìã –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{application_id}"))
    builder.adjust(2, 2, 1)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
def get_application_control_keyboard(application_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{application_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{application_id}"))
    builder.add(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{application_id}"))
    builder.add(InlineKeyboardButton(text="üìã –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{application_id}"))
    builder.adjust(2, 2)
    return builder.as_markup()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(message.from_user.id)
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def cmd_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏–º–∏—Ç –≤ 3 –∑–∞—è–≤–∫–∏.\n"
        "–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –∑–∞—è–≤–∫–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ 2 –Ω–µ–¥–µ–ª–∏.\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –Ω–∞–±–æ—Ä."
    )
    await message.answer(help_text)

# –ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def start_application(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏ –±–∞–Ω
    can_apply, reason = check_application_limit(user_id)
    if not can_apply:
        await message.answer(reason)
        return
    
    await message.answer(
        "üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Minecraft:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ApplicationStates.minecraft_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ Minecraft
async def get_minecraft_name(message: types.Message, state: FSMContext):
    await state.update_data(minecraft_name=message.text)
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ "
        "(–ø–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.):"
    )
    await state.set_state(ApplicationStates.interesting_info)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def get_interesting_info(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    user = message.from_user
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        application_id = execute_db_query('''
            INSERT INTO applications 
            (user_id, username, first_name, last_name, minecraft_name, interesting_info) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            user_data['minecraft_name'],
            message.text
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_stats(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = execute_db_query('SELECT application_count FROM user_stats WHERE user_id = ?', (user.id,), fetch=True)
        app_count = result[0][0] if result else 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
        await notify_recruiters(bot, application_id, user, user_data['minecraft_name'], message.text)
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: {app_count}/3\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫: {3 - app_count}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –Ω–∞–±–æ—Ä!",
            reply_markup=get_main_menu(user.id)
        )
        
    except Exception as e:
        logger.error(f"Error saving application: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu(user.id)
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
async def notify_recruiters(bot: Bot, app_id: int, applicant, minecraft_name: str, interesting_info: str):
    try:
        recruiters = execute_db_query('SELECT user_id FROM recruiters', fetch=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        all_recruiters = [(CREATOR_ID,)] + recruiters
        
        for recruiter in all_recruiters:
            recruiter_id = recruiter[0]
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if recruiter_id == CREATOR_ID:
                keyboard = get_application_control_keyboard_creator(app_id, applicant.id)
            else:
                keyboard = get_application_control_keyboard(app_id)
            
            try:
                await bot.send_message(
                    chat_id=recruiter_id,
                    text=f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n\n"
                         f"üë§ –ê–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –¢–ì: {applicant.id}\n"
                         f"üë§ –ò–º—è: {applicant.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                         f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{applicant.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                         f"üìõ –ù–∏–∫ –≤ Minecraft: {minecraft_name}\n"
                         f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {interesting_info}",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recruiter_id}: {e}")
    except Exception as e:
        logger.error(f"Error notifying recruiters: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
async def view_applications(message: types.Message):
    if not (is_creator(message.from_user.id) or is_recruiter(message.from_user.id)):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –æ–∂–∏–¥–∞—é—â—É—é –∑–∞—è–≤–∫—É
        applications = execute_db_query('''
            SELECT id, user_id, username, first_name, minecraft_name, interesting_info, application_date 
            FROM applications 
            WHERE status = 'pending'
            ORDER BY application_date ASC 
            LIMIT 1
        ''', fetch=True)
        
        if not applications:
            await message.answer("üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_admin_panel(message.from_user.id))
            return
        
        app = applications[0]
        app_id, user_id, username, first_name, minecraft_name, interesting_info, date = app
        
        response = f"üìã –ó–∞—è–≤–∫–∞ #{app_id}\n\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        response += f"   ID: {user_id}\n"
        response += f"   –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        response += f"   –Æ–∑–µ—Ä–Ω–µ–π–º: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        response += f"üéÆ –ù–∏–∫ –≤ Minecraft: {minecraft_name}\n\n"
        response += f"üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{interesting_info}\n\n"
        response += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {date}"
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
        if is_creator(message.from_user.id):
            keyboard = get_application_control_keyboard_creator(app_id, user_id)
        else:
            keyboard = get_application_control_keyboard(app_id)
        
        await message.answer(
            response,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error viewing applications: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫", reply_markup=get_admin_panel(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
async def handle_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    
    if not (is_creator(user_id) or is_recruiter(user_id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    data = callback.data
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        parts = data.split('_')
        action = parts[0]
        
        if action in ['accept', 'reject', 'reply', 'next']:
            app_id = int(parts[1])
            
            if action == 'accept':
                await handle_application_response(callback, bot, app_id, "accepted", "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞")
            elif action == 'reject':
                await handle_application_response(callback, bot, app_id, "rejected", "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", ban_user=True)
            elif action == 'reply':
                await start_reply(callback, state, app_id)
            elif action == 'next':
                await show_next_application(callback, bot)
                
        elif action == 'make' and parts[1] == 'recruiter':
            app_id = int(parts[2])
            await make_user_recruiter(callback, bot, app_id)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing callback data: {data}, error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    
    await callback.answer()

# –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
async def make_user_recruiter(callback: types.CallbackQuery, bot: Bot, app_id: int):
    if not is_creator(callback.from_user.id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        result = execute_db_query('''
            SELECT user_id, username, first_name, last_name 
            FROM applications 
            WHERE id = ?
        ''', (app_id,), fetch=True)
        
        if not result:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        applicant_id, username, first_name, last_name = result[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
        success, message = add_user_as_recruiter(applicant_id, username, first_name, last_name, callback.from_user.id)
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            try:
                await bot.send_message(
                    chat_id=applicant_id,
                    text="üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –Ω–∞–±–æ—Ä!\n\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                         "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏\n"
                         "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏\n"
                         "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or first_name} —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π!\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{app_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
            )
        else:
            await callback.answer(message, show_alert=True)
            
    except Exception as e:
        logger.error(f"Error making user recruiter: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", show_alert=True)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
async def show_next_application(callback: types.CallbackQuery, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–∂–∏–¥–∞—é—â—É—é –∑–∞—è–≤–∫—É
        applications = execute_db_query('''
            SELECT id, user_id, username, first_name, minecraft_name, interesting_info, application_date 
            FROM applications 
            WHERE status = 'pending'
            ORDER BY application_date ASC 
            LIMIT 1
        ''', fetch=True)
        
        if not applications:
            await callback.message.edit_text("üìù –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
            return
        
        app = applications[0]
        app_id, user_id, username, first_name, minecraft_name, interesting_info, date = app
        
        response = f"üìã –ó–∞—è–≤–∫–∞ #{app_id}\n\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        response += f"   ID: {user_id}\n"
        response += f"   –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        response += f"   –Æ–∑–µ—Ä–Ω–µ–π–º: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        response += f"üéÆ –ù–∏–∫ –≤ Minecraft: {minecraft_name}\n\n"
        response += f"üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{interesting_info}\n\n"
        response += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {date}"
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
        if is_creator(callback.from_user.id):
            keyboard = get_application_control_keyboard_creator(app_id, user_id)
        else:
            keyboard = get_application_control_keyboard(app_id)
        
        await callback.message.edit_text(
            response,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing next application: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
async def handle_application_response(callback: types.CallbackQuery, bot: Bot, app_id: int, status: str, status_text: str, ban_user=False):
    user_id = callback.from_user.id
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        execute_db_query('''
            UPDATE applications 
            SET status = ?, responded_by = ?, response_date = ?
            WHERE id = ?
        ''', (status, user_id, datetime.now(), app_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        result = execute_db_query('SELECT user_id, minecraft_name FROM applications WHERE id = ?', (app_id,), fetch=True)
        if not result:
            await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        applicant_id = result[0][0]
        minecraft_name = result[0][1]
        
        # –ï—Å–ª–∏ –æ—Ç–∫–∞–∑ - –±–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
        if ban_user:
            ban_success = ban_user(applicant_id, user_id, "–û—Ç–∫–∞–∑ –≤ –∑–∞—è–≤–∫–µ")
            if ban_success:
                ban_message = "\nüö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏."
            else:
                ban_message = "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω."
        else:
            ban_message = ""
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º applicant
        try:
            await bot.send_message(
                chat_id=applicant_id,
                text=f"üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                     f"üìõ –ù–∏–∫: {minecraft_name}\n"
                     f"üìä –°—Ç–∞—Ç—É—Å: {status_text}{ban_message}\n"
                     f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{callback.from_user.username if callback.from_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å applicant {applicant_id}: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} {status_text.lower()}\n"
            f"üë§ Applicant: {applicant_id}\n"
            f"üìõ –ù–∏–∫: {minecraft_name}"
            f"{' - –ó–ê–ë–ê–ù–ï–ù –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏' if ban_user else ''}"
        )
        
    except Exception as e:
        logger.error(f"Error handling application response: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")

# –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
async def start_reply(callback: types.CallbackQuery, state: FSMContext, app_id: int):
    await state.update_data(replying_to=app_id, reply_message_id=callback.message.message_id)
    await callback.message.edit_text(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}:\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )
    await state.set_state(RecruiterStates.waiting_for_reply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
async def handle_recruiter_reply(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    app_id = user_data.get('replying_to')
    
    if not app_id:
        await state.clear()
        return
    
    reply_text = message.text
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        result = execute_db_query('SELECT user_id, minecraft_name FROM applications WHERE id = ?', (app_id,), fetch=True)
        if not result:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        applicant_id = result[0][0]
        minecraft_name = result[0][1]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        execute_db_query('''
            UPDATE applications 
            SET response = ?, responded_by = ?, response_date = ?
            WHERE id = ?
        ''', (reply_text, message.from_user.id, datetime.now(), app_id))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç applicant
        try:
            await bot.send_message(
                chat_id=applicant_id,
                text=f"üíå –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É:\n\n"
                     f"üìõ –í–∞—à –Ω–∏–∫: {minecraft_name}\n"
                     f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {reply_text}\n\n"
                     f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{message.from_user.username if message.from_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç applicant {applicant_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return
        
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_admin_panel(message.from_user.id))
        
    except Exception as e:
        logger.error(f"Error handling recruiter reply: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
    
    await state.clear()

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def admin_panel(message: types.Message):
    if not (is_creator(message.from_user.id) or is_recruiter(message.from_user.id)):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_panel(message.from_user.id)
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
async def show_recruiters_list(message: types.Message):
    if not is_creator(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
        return
    
    try:
        recruiters = execute_db_query('SELECT * FROM recruiters', fetch=True)
        
        if not recruiters:
            response = "üìù –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç"
        else:
            response = "üë• –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö:\n\n"
            for recruiter in recruiters:
                response += f"‚Ä¢ ID: {recruiter[0]}\n"
                response += f"  –ò–º—è: {recruiter[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                response += f"  –Æ–∑–µ—Ä–Ω–µ–π–º: @{recruiter[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        
        await message.answer(response, reply_markup=get_admin_panel(message.from_user.id))
    except Exception as e:
        logger.error(f"Error managing recruiters: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö", reply_markup=get_admin_panel(message.from_user.id))

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def view_statistics(message: types.Message):
    if not (is_creator(message.from_user.id) or is_recruiter(message.from_user.id)):
        return
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_apps = execute_db_query('SELECT COUNT(*) FROM applications', fetch=True)[0][0]
        pending_apps = execute_db_query('SELECT COUNT(*) FROM applications WHERE status = "pending"', fetch=True)[0][0]
        accepted_apps = execute_db_query('SELECT COUNT(*) FROM applications WHERE status = "accepted"', fetch=True)[0][0]
        rejected_apps = execute_db_query('SELECT COUNT(*) FROM applications WHERE status = "rejected"', fetch=True)[0][0]
        banned_users = execute_db_query('SELECT COUNT(*) FROM bans WHERE is_active = TRUE AND ban_until > ?', (datetime.now(),), fetch=True)[0][0]
        total_recruiters = execute_db_query('SELECT COUNT(*) FROM recruiters', fetch=True)[0][0]
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        response += f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_apps}\n"
        response += f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending_apps}\n"
        response += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {accepted_apps}\n"
        response += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_apps}\n"
        response += f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_users}\n"
        response += f"üë• –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {total_recruiters}"
        
        await message.answer(response, reply_markup=get_admin_panel(message.from_user.id))
    except Exception as e:
        logger.error(f"Error viewing statistics: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=get_admin_panel(message.from_user.id))

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
async def my_applications(message: types.Message):
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = execute_db_query('SELECT application_count FROM user_stats WHERE user_id = ?', (user_id,), fetch=True)
        
        if not stats or stats[0][0] == 0:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_main_menu(user_id))
            return
        
        app_count = stats[0][0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
        applications = execute_db_query('''
            SELECT minecraft_name, interesting_info, status, response, application_date 
            FROM applications 
            WHERE user_id = ? 
            ORDER BY application_date DESC
        ''', (user_id,), fetch=True)
        
        response = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({app_count}/3):\n\n"
        
        for i, app in enumerate(applications, 1):
            minecraft_name, interesting_info, status, response_text, date = app
            status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞" if status == "accepted" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞" if status == "rejected" else "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
            
            response += f"üìÑ –ó–∞—è–≤–∫–∞ #{i}:\n"
            response += f"   üéÆ –ù–∏–∫: {minecraft_name}\n"
            response += f"   üí¨ –ò–Ω—Ñ–æ: {interesting_info}\n"
            response += f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            
            if response_text:
                response += f"   üíå –û—Ç–≤–µ—Ç: {response_text}\n"
            
            response += f"   üìÖ –î–∞—Ç–∞: {date}\n\n"
        
        await message.answer(response, reply_markup=get_main_menu(user_id))
    except Exception as e:
        logger.error(f"Error viewing user applications: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_main_menu(user_id))

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(message.from_user.id)
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = "8355580515:AAGXkvDqf7xmqlp1Q_rUNLWCEwD1DX-m8pM"
    
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    dp.message.register(back_to_main_menu, F.text == "‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    dp.message.register(start_application, F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    dp.message.register(my_applications, F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
    dp.message.register(cmd_help, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    dp.message.register(admin_panel, F.text == "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    dp.message.register(show_recruiters_list, F.text == "üë• –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
    dp.message.register(view_applications, F.text == "üì® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")
    dp.message.register(view_statistics, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(get_minecraft_name, ApplicationStates.minecraft_name)
    dp.message.register(get_interesting_info, ApplicationStates.interesting_info)
    dp.message.register(handle_recruiter_reply, RecruiterStates.waiting_for_reply)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
    dp.callback_query.register(handle_callback)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())